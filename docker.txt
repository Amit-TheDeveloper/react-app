Docker:
0) docker --version
1) docker run -p <host port>:<container port> -d <registry url>/<application name>:<tag version>   [If image already exist locally, then it won't download from registry, else first download image]
docker run -p 5000:5000 -d in28min/todo-rest-api-h2:1.0.0_RELEASE
-d: To run applications in detached mode. i.e. do not tie terminal to application. Run application in background.2) docker run -d -p6001:6000 --name <custom container name> <image>:<version> [To start and identify a container with a custom name instead of random name generated by docker.]3) docker start <CONTAINER ID> [Start works with already created containers. Run creates a new container]
4) docker logs -f <container id>  [To view the container logs.]- Also see [docker logs <container name>]
5) docker container ls   [list running containers] Also see [docker ps and docker ps -a]
6) docker images  [To see all images downloaded locally.]
7) docker container ls -a   [To see all containers whether running or exited.]
8) docker stop <container id>  [To stop running container.]9) docker pull  [To pull an image locally]
10) docker image history <image id>  [See all the steps involved in creating an image]11) docker image inspect12) docker image remove <image id> [To delete image locally] Also see, docker rmi <IMAGE ID>13) docker rm <CONTAINER ID> [To delete a container. After removing a container, Image can be deleted]13) docker container pause <container id> [To pause a container in its current state.]14) docker container unpause <container id> [To unpause the container]15) docker container inspect <container id>. [To inspect a container]16) docker container prune [To remove all the exited containers. container ls command won't show the exited containers now]17) docker events [If this is run in a separate terminal. All the docker actions performed on another terminal can be viewed on the events terminal to check what is happening to env.]18) docker exec -it <CONTAINER NAME or ID>/bin/bash [To get the terminal of the container, so that we can access the virtual paths/files within the container. After executing this, you will be inside the container]
19) spring-boot:build-image [Maven command to create docker image using spring boot]20) docker-compose up [To use docker-composer.yaml file to run multiple micro-services using single yaml file]
Docker Networks:When multiple containers run in the same network, they can communicate using the container name. Not required to give any host name or port. Because they are in the same Isolated Network. Applications connecting to them from outside(docker network) need host and port name to connect to these applications.
Example below step 3&4 starting mongodb and mongo express in same network <NETWORK_NAME>
Docker Network commands:1) docker network ls [List available networks]2) docker network create <NETWORK NAME> e.g. docker network create myNetwork3) docker run -d -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=password --name mongoDB --net <NETWORK_NAME> mongo4) docker run -d -p 8081:8081 -e ME_CONFIG_MONGODB_ADMINUSER=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=password --net <NETWORK_NAME> -e MONGO_CONFIG_MONGODB_SERVER=mongodb mongo-express

Docker-ComposeInstead of executing the above commands every time from the command line to start different services, instead these can be composed in a single yaml file andstart services from the yaml file using docker-compose. If there are multiple services in the yaml file, then a network is automatically created.
1) docker-compose -f <DOCKER yaml file name xx.yaml> up -d  [start containers based on the services mentioned in the yaml file]
2) 1) docker-compose -f <DOCKER yaml file name xx.yaml> down [stop containers in the yaml file and delete the network as well]
DockerfileTo create an image of an application, use Dockerfile. It strictly follows the same name convention Dockerfile
1) docker build -t <image name>
Push Docker images to private repository:The built images can be pushed to private repositories e.g. AWS ECR.For this first create a repository on AWS portal. In the case of AWS, each image has a separate repository and multiple tags/versions can be maintained in the same repository for that image. Unlike other repositories, multiple different images can be pushed to the same repository. For pushing images to private repositories, complete server location (host,port) needs to be provided.So tag(rename) the built image using the following command.
docker tag <myBuild:version> <amazon url, check documentation>/<myBuild:version> [ make a copy of the myBuild with a later naming convention.]docker push <amazon url, check documentation>/<myBuild:version> [push the build to repository]
Docker VolumesWhen we want do not want to lose the stored data on a db container or service start up, we use Docker Volumes. When restarting a service or a container the data persisted in the database will get wiped out as the database service reinitializes.To prevent losing of data, the container db path is mapped to the host directory location. So when the data is updated on either one of these, the changes get reflected to the other. To do this, update the docker-compose.yaml file with volumes. Docker volumes are of 3 types( host path:container path, [container path] anonymous, [my-db:container path] named).  Named type is prefered in Production.  

Notes:  
Only the first few chars of container id are required to uniquely identify the container. Not required to provide the entire container id.

 Docker Architecture:

        [Docker Client] ------>>> From where a command is issued.
              |
              |
              |
    [Docker Daemon/Engineer] ------>>> Takes a command and executes it
      |                |          |
      |                |          |.           ------>>> Things managed by Docker Engine
      |                |          |
[containers]  [Local   [Fetch/Push 
              images]   from/to registry]




docker rm -f $(docker ps -a -q)
docker rmi -f $(docker images -a -q)
docker volume rm $(docker volume ls -q)
docker network rm $(docker network ls | tail -n+2 | awk '{if($2 !~ /bridge|none|host/){ print $1 }}')
